<?xml version="1.0" encoding="UTF-8"?>
<project>

  <target name="-post-compile" depends="build-ndk" />
  <target name="-pre-compile" depends="generate_beautified_benchmark_sources" />
  <target name="-pre-build" depends="update_revision" />
  <target name="-post-build" depends="warn-of-dirty-state" />

  <target name="clean" depends="android_rules.clean">
    <exec executable="${ndk.dir}/ndk-build" failonerror="true">
      <arg value="clean"/>
    </exec>
    <delete file="${jni_src.dir}/${jni_header}" />
    <delete file="${jni_src.dir}/nativebenchmark.c" />
    <delete file="${jni_src.dir}/nativerunners.c" />
    <delete file="${jni_src.dir}/custom_benchmarks.c" />
    <delete file="${jni_src.dir}/natives.h" />
    <delete file="${jni_src.dir}/native_benchmarks.h" />
    <delete dir="${gen_src.dir}/fi/helsinki/cs/tituomin/nativebenchmark/benchmark" />
    <delete file="cache.properties"/>
  </target>

  <fileset dir="${codegen_script.dir}" id="python-codegen" includes="**/*.py,**/*.c,**/*.java">
    <modified />
  </fileset>
  <pathconvert
      refid="python-codegen"
      property="codegen.modified"
      setonempty="false"/>

  <property name="jni_classes_other"
            value="fi.helsinki.cs.tituomin.nativebenchmark.BenchmarkParameter,fi.helsinki.cs.tituomin.nativebenchmark.BenchmarkRegistry"/>

  <target name="check-modified-other">
  <fileset dir="bin/classes" id="other-natives" erroronmissingdir="false"
           includes="fi/helsinki/cs/tituomin/nativebenchmark/BenchmarkParameter.class,fi/helsinki/cs/tituomin/nativebenchmark/BenchmarkRegistry.class">
    <modified />
  </fileset>
  <pathconvert
      refid="other-natives"
      property="natives.modified"
      setonempty="false"/>
  </target>

  <target name="generate_beautified_benchmark_sources" depends="generate_benchmark_sources">
      <exec executable="indent" logError="true" failonerror="false">
          <arg value="-kr" />
          <arg value="--no-tabs" />
          <arg value="${jni_src.dir}/nativebenchmark.c" />
          <arg value="${jni_src.dir}/nativerunners.c" />
          <arg value="${jni_src.dir}/custom_benchmarks.c" />
      </exec>
      <exec executable="astyle" logError="true" failonerror="false">
          <arg value="--quiet" />
          <arg value="--delete-empty-lines" />
          <arg value="-n" />
          <arg value="${gen_src.dir}/fi/helsinki/cs/tituomin/nativebenchmark/*" />
          <arg value="${gen_src.dir}/fi/helsinki/cs/tituomin/nativebenchmark/benchmark/*" />
      </exec>
  </target>

  <target name="generate_benchmark_sources" if="codegen.modified" >
    <mkdir dir="${gen_src.dir}/fi/helsinki/cs/tituomin/nativebenchmark/benchmark"/>
    <exec executable="python" outputproperty="jni_classes_benchmarks" logError="true" failonerror="true">
          <arg value="${codegen_script.dir}/make_benchmarks.py" />
          <arg value="${jni_src.dir}/nativebenchmark.c" />
          <arg value="${jni_src.dir}/nativerunners.c" />
          <arg value="${jni_src.dir}/custom_benchmarks.c" />
          <arg value="${gen_src.dir}" />
          <arg value="${codegen_script.dir}/templates/jni_interface_benchmarks.c" />
          <arg value="${codegen_script.dir}/templates/CustomBenchmarks.java" />
    </exec>
    <property name="code.generated" value="true" />
  </target>

  <target name="jni_headers_benchmark" depends="check-modified-other" if="code.generated">
    <javah outputFile="${jni_src.dir}/${jni_header_benchmarks}" classpath="bin/classes" class="${jni_classes_benchmarks}" />
  </target>

  <target name="jni_headers_other" if="natives.modified">
    <javah outputFile="${jni_src.dir}/${jni_header}" classpath="bin/classes" class="${jni_classes_other}" />
  </target>

  <target name="should_update_native.check" depends="check-modified-other">
      <condition property="should_update_native.condition">
          <or>
              <isset property="codegen.modified" />
              <isset property="natives.modified" />
          </or>
      </condition>
  </target>

  <target name="build-ndk"
          depends="jni_headers_benchmark,jni_headers_other,should_update_native.check"
          if="should_update_native.condition">
      <exec executable="${ndk.dir}/ndk-build" failonerror="true"/>
  </target>

  <target name="-check-dirty-state" depends="update_revision">
      <condition property="dirty-state-true">
          <not>
              <equals arg1="${app.dirty}" arg2="0" />
          </not>
      </condition>
  </target>

  <target name="warn-of-dirty-state" depends="-check-dirty-state" if="dirty-state-true">
      <echo>---=== WARNING :: Working tree contains uncommitted changes :: WARNING ===---</echo>
  </target>

  <target name="update_revision">
    <exec executable="git" outputproperty="app.revision" logError="true" failonerror="true" >
      <arg value="describe"/>
      <arg value="--tags"/>
      <arg value="--dirty"/>
    </exec>

    <exec executable="git" logError="false" failonerror="false" resultproperty="app.dirty">
      <arg value="diff"/>
      <arg value="--quiet"/>
      <arg value="--exit-code"/>
    </exec>

    <checksum totalproperty="sources.checksum">
      <path>
      <fileset dir="src">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="script">
        <include name="**/*.py"/>
      </fileset>
      <fileset dir="jni">
        <include name="**/*.mk"/>
        <include name="returnvalues.c"/>
        <include name="returnvalues.h"/>
      </fileset>
      <fileset dir=".">
        <include name="AndroidManifest.xml"/>
      </fileset>
      </path>
    </checksum>

    <copy file="revision_template.xml" tofile="res/values/revision.xml" overwrite="true">
      <filterset>
        <filter token="REVISION" value="${app.revision}"/>
        <filter token="CHECKSUM" value="${sources.checksum}"/>
        <filter token="DIRTY" value="${app.dirty}"/>
      </filterset>
    </copy>
  </target>

</project>

